use crate::encoding::sealed::Sealed;
use crate::encoding::{AlwaysValid, Encoding, NullTerminable, ValidateError};
use crate::str::Str;
#[cfg(feature = "rand")]
use rand::{distr::Distribution, Rng};

const ENCODE_MAP_1251: phf::Map<char, u8> = phf::phf_map! {
    '–Ç' => 0, '–É' => 1, '‚Äö' => 2, '—ì' => 3, '‚Äû' => 4, '‚Ä¶' => 5, '‚Ä†' => 6, '‚Ä°' => 7, '‚Ç¨' => 8,
    '‚Ä∞' => 9, '–â' => 10, '‚Äπ' => 11, '–ä' => 12, '–å' => 13, '–ã' => 14, '–è' => 15, '—í' => 16,
    '‚Äò' => 17, '‚Äô' => 18, '‚Äú' => 19, '‚Äù' => 20, '‚Ä¢' => 21, '‚Äì' => 22, '‚Äî' => 23, '‚êö' => 24,
    '‚Ñ¢' => 25, '—ô' => 26, '‚Ä∫' => 27, '—ö' => 28, '—ú' => 29, '—õ' => 30, '—ü' => 31, ' ' => 32,
    '–é' => 33, '—û' => 34, '–à' => 35, '¬§' => 36, '“ê' => 37, '¬¶' => 38, '¬ß' => 39, '–Å' => 40,
    '¬©' => 41, '–Ñ' => 42, '¬´' => 43, '¬¨' => 44, '\u{AD}' => 45, '¬Æ' => 46, '–á' => 47, '¬∞' => 48,
    '¬±' => 49, '–Ü' => 50, '—ñ' => 51, '“ë' => 52, '¬µ' => 53, '¬∂' => 54, '¬∑' => 55, '—ë' => 56,
    '‚Ññ' => 57, '—î' => 58, '¬ª' => 59, '—ò' => 60, '–Ö' => 61, '—ï' => 62, '—ó' => 63, '–ê' => 64,
    '–ë' => 65, '–í' => 66, '–ì' => 67, '–î' => 68, '–ï' => 69, '–ñ' => 70, '–ó' => 71, '–ò' => 72,
    '–ô' => 73, '–ö' => 74, '–õ' => 75, '–ú' => 76, '–ù' => 77, '–û' => 78, '–ü' => 79, '–†' => 80,
    '–°' => 81, '–¢' => 82, '–£' => 83, '–§' => 84, '–•' => 85, '–¶' => 86, '–ß' => 87, '–®' => 88,
    '–©' => 89, '–™' => 90, '–´' => 91, '–¨' => 92, '–≠' => 93, '–Æ' => 94, '–Ø' => 95, '–∞' => 96,
    '–±' => 97, '–≤' => 98, '–≥' => 99, '–¥' => 100, '–µ' => 101, '–∂' => 102, '–∑' => 103, '–∏' => 104,
    '–π' => 105, '–∫' => 106, '–ª' => 107, '–º' => 108, '–Ω' => 109, '–æ' => 110, '–ø' => 111, '—Ä' => 112,
    '—Å' => 113, '—Ç' => 114, '—É' => 115, '—Ñ' => 116, '—Ö' => 117, '—Ü' => 118, '—á' => 119, '—à' => 120,
    '—â' => 121, '—ä' => 122, '—ã' => 123, '—å' => 124, '—ç' => 125, '—é' => 126, '—è' => 127,
};

const DECODE_MAP_1251: [char; 128] = [
    '–Ç', '–É', '‚Äö', '—ì', '‚Äû', '‚Ä¶', '‚Ä†', '‚Ä°', '‚Ç¨', '‚Ä∞', '–â', '‚Äπ', '–ä', '–å', '–ã', '–è', '—í', '‚Äò', '‚Äô',
    '‚Äú', '‚Äù', '‚Ä¢', '‚Äì', '‚Äî', '‚êö', '‚Ñ¢', '—ô', '‚Ä∫', '—ö', '—ú', '—õ', '—ü', ' ', '–é', '—û', '–à', '¬§', '“ê',
    '¬¶', '¬ß', '–Å', '¬©', '–Ñ', '¬´', '¬¨', '\u{AD}', '¬Æ', '–á', '¬∞', '¬±', '–Ü', '—ñ', '“ë', '¬µ', '¬∂', '¬∑',
    '—ë', '‚Ññ', '—î', '¬ª', '—ò', '–Ö', '—ï', '—ó', '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ô', '–ö',
    '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–´', '–¨', '–≠',
    '–Æ', '–Ø', '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä',
    '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è',
];

const DECODE_MAP_1252: [char; 32] = [
    '‚Ç¨', '\u{81}', '‚Äö', '∆í', '‚Äû', '‚Ä¶', '‚Ä†', '‚Ä°', 'ÀÜ', '‚Ä∞', '≈†', '‚Äπ', '≈í', '\u{8D}', '≈Ω', '\u{8F}',
    '\u{90}', '‚Äò', '‚Äô', '‚Äú', '‚Äù', '‚Ä¢', '‚Äì', '‚Äî', 'Àú', '‚Ñ¢', '≈°', '‚Ä∫', '≈ì', '\u{9D}', '≈æ', '≈∏',
];

/// The [Windows-1251](https://en.wikipedia.org/wiki/Windows-1251) encoding.
#[non_exhaustive]
#[derive(Default)]
pub struct Win1251;

impl Sealed for Win1251 {}

impl Encoding for Win1251 {
    const REPLACEMENT: char = '\x1A';
    const MAX_LEN: usize = 1;
    type Bytes = u8;

    fn shorthand() -> &'static str {
        "win1251"
    }

    fn validate(bytes: &[u8]) -> Result<(), ValidateError> {
        bytes.iter().enumerate().try_for_each(|(idx, b)| {
            if *b == 0x98 {
                Err(ValidateError {
                    valid_up_to: idx,
                    error_len: Some(1),
                })
            } else {
                Ok(())
            }
        })
    }

    fn encode_char(c: char) -> Option<Self::Bytes> {
        if (..0x80).contains(&(c as u32)) {
            Some(c as u8)
        } else {
            ENCODE_MAP_1251.get(&c).map(|b| b + 0x80)
        }
    }

    fn decode_char(str: &Str<Self>) -> (char, &Str<Self>) {
        let b = str.as_bytes()[0];
        if (..0x80).contains(&b) {
            (b as char, &str[1..])
        } else {
            (DECODE_MAP_1251[b as usize - 0x80], &str[1..])
        }
    }

    fn char_bound(_: &Str<Self>, _: usize) -> bool {
        true
    }

    fn char_len(c: char) -> usize {
        if (c as u32) < 0x80 || DECODE_MAP_1251.contains(&c) {
            1
        } else {
            0
        }
    }
}

impl NullTerminable for Win1251 {}

#[cfg(feature = "rand")]
impl Distribution<char> for Win1251 {
    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {
        // Number of characters
        let c = rng.random_range(0u8..255);
        if c <= 0x7F {
            char::from(c)
        } else if c < 0x98 {
            DECODE_MAP_1251[(c - 0x80) as usize]
        } else {
            DECODE_MAP_1251[(c + 1 - 0x80) as usize]
        }
    }
}

/// The [Windows-1252](https://en.wikipedia.org/wiki/Windows-1252) encoding.
#[non_exhaustive]
#[derive(Default)]
pub struct Win1252;

impl Sealed for Win1252 {}

impl Encoding for Win1252 {
    const REPLACEMENT: char = '\x1A';
    const MAX_LEN: usize = 1;
    type Bytes = u8;

    fn shorthand() -> &'static str {
        "win1252"
    }

    fn validate(bytes: &[u8]) -> Result<(), ValidateError> {
        bytes.iter().enumerate().try_for_each(|(idx, b)| {
            if [0x81, 0x8D, 0x8F, 0x90, 0x9D].contains(b) {
                Err(ValidateError {
                    valid_up_to: idx,
                    error_len: Some(1),
                })
            } else {
                Ok(())
            }
        })
    }

    fn encode_char(c: char) -> Option<Self::Bytes> {
        if (..0x80).contains(&(c as u32)) || (0xA0..0x100).contains(&(c as u32)) {
            Some(c as u8)
        } else {
            let pos = DECODE_MAP_1252.iter().position(|v| *v == c)? as u8;
            Some(pos + 0x80)
        }
    }

    fn decode_char(str: &Str<Self>) -> (char, &Str<Self>) {
        let b = str.as_bytes()[0];
        if (0x80..0xA0).contains(&b) {
            (DECODE_MAP_1252[b as usize - 0x80], &str[1..])
        } else {
            (b as char, &str[1..])
        }
    }

    fn char_bound(_: &Str<Self>, _: usize) -> bool {
        true
    }

    fn char_len(c: char) -> usize {
        if (c as u32) < 0x80 || DECODE_MAP_1252.contains(&c) {
            1
        } else {
            0
        }
    }
}

impl NullTerminable for Win1252 {}

#[cfg(feature = "rand")]
impl Distribution<char> for Win1252 {
    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {
        // Number of characters
        let c = rng.random_range(0u8..251);
        if c <= 0x7F {
            char::from(c)
        } else if c >= (0xA0 - 5) {
            char::from(c + 5)
        } else {
            let offset = match c {
                0x80 => 0,
                ..=0x8B => 1,
                ..=0x8C => 2,
                ..=0x98 => 4,
                _ => 5,
            };
            DECODE_MAP_1252[(c + offset - 0x80) as usize]
        }
    }
}

/// The [Windows-1252](https://en.wikipedia.org/wiki/Windows-1252) encoding, with empty spots
/// replaced by the corresponding C1 control codes.
#[non_exhaustive]
#[derive(Default)]
pub struct Win1252Loose;

impl Sealed for Win1252Loose {}

impl Encoding for Win1252Loose {
    const REPLACEMENT: char = '\x1A';
    const MAX_LEN: usize = 1;
    type Bytes = u8;

    fn shorthand() -> &'static str {
        "win1252_loose"
    }

    fn validate(_: &[u8]) -> Result<(), ValidateError> {
        // All bytes are valid in this variant of Win1252, we just leave the invalid bytes alone
        Ok(())
    }

    fn encode_char(c: char) -> Option<Self::Bytes> {
        if (..0x80).contains(&(c as u32)) || (0xA0..0x100).contains(&(c as u32)) {
            Some(c as u8)
        } else {
            let pos = DECODE_MAP_1252.iter().position(|v| *v == c)? as u8;
            Some(pos + 0x80)
        }
    }

    fn decode_char(str: &Str<Self>) -> (char, &Str<Self>) {
        let b = str.as_bytes()[0];
        if (0x80..0xA0).contains(&b) {
            (DECODE_MAP_1252[b as usize - 0x80], &str[1..])
        } else {
            (b as char, &str[1..])
        }
    }

    fn char_bound(_: &Str<Self>, _: usize) -> bool {
        true
    }

    fn char_len(c: char) -> usize {
        if (c as u32) > 255 {
            0
        } else {
            1
        }
    }
}

impl NullTerminable for Win1252Loose {}

impl AlwaysValid for Win1252Loose {}

#[cfg(feature = "rand")]
impl Distribution<char> for Win1252Loose {
    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {
        // Number of characters
        let c = rng.random::<u8>();
        if c <= 0x7F || c >= 0xA0 {
            char::from(c)
        } else {
            DECODE_MAP_1252[(c - 0x80) as usize]
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_validate_win1251() {
        assert!(Win1251::validate(b"01\xD5\xFF").is_ok());
        assert_eq!(
            Win1251::validate(b"0\xFF\x97\x98\x99"),
            Err(ValidateError {
                valid_up_to: 3,
                error_len: Some(1),
            })
        );
    }

    #[test]
    fn test_encode_win1251() {
        assert_eq!(Win1251::encode_char('A'), Some(b'A'));
        assert_eq!(Win1251::encode_char('–Ç'), Some(0x80));
        assert_eq!(Win1251::encode_char('—è'), Some(0xFF));
        assert_eq!(Win1251::encode_char('êê∑'), None,);
    }

    #[test]
    fn test_decode_win1251() {
        // SAFETY: This test data is guaranteed valid
        let str = unsafe { Str::from_bytes_unchecked(b"A\x80\xFF\0") };
        let (c, str) = Win1251::decode_char(str);
        assert_eq!(c, 'A');
        let (c, str) = Win1251::decode_char(str);
        assert_eq!(c, '–Ç');
        let (c, str) = Win1251::decode_char(str);
        assert_eq!(c, '—è');
        let (c, _) = Win1251::decode_char(str);
        assert_eq!(c, '\0');
    }

    #[test]
    fn test_char_len_win1251() {
        let c = '—Ñ';
        assert_eq!(Win1251::char_len(c), 1);
        let c = 'êê∑';
        assert_eq!(Win1251::char_len(c), 0);
    }

    #[test]
    fn test_validate_win1252() {
        assert!(Win1252::validate(b"01\xD5\xFF").is_ok());
        assert_eq!(
            Win1252::validate(b"0\xFF\x97\x9D\x99"),
            Err(ValidateError {
                valid_up_to: 3,
                error_len: Some(1),
            })
        );
    }

    #[test]
    fn test_encode_win1252() {
        assert_eq!(Win1252::encode_char('A'), Some(b'A'));
        assert_eq!(Win1252::encode_char('‚Ç¨'), Some(0x80));
        assert_eq!(Win1252::encode_char('√ø'), Some(0xFF));
        assert_eq!(Win1252::encode_char('êê∑'), None,);
    }

    #[test]
    fn test_decode_win1252() {
        // SAFETY: This test data is guaranteed valid
        let str = unsafe { Str::from_bytes_unchecked(b"A\x80\xFF\0") };
        let (c, str) = Win1252::decode_char(str);
        assert_eq!(c, 'A');
        let (c, str) = Win1252::decode_char(str);
        assert_eq!(c, '‚Ç¨');
        let (c, str) = Win1252::decode_char(str);
        assert_eq!(c, '√ø');
        let (c, _) = Win1252::decode_char(str);
        assert_eq!(c, '\0');
    }

    #[test]
    fn test_char_len_win1252() {
        let c = '‚Ç¨';
        assert_eq!(Win1252::char_len(c), 1);
        let c = 'êê∑';
        assert_eq!(Win1252::char_len(c), 0);
    }
}
